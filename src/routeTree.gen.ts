/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as UsernameRouteRouteImport } from './routes/$username/route'
import { Route as IndexRouteImport } from './routes/index'
import { Route as UsernameIndexRouteImport } from './routes/$username/index'
import { Route as UsernameProjectRouteRouteImport } from './routes/$username/$project/route'
import { Route as UsernameProjectIndexRouteImport } from './routes/$username/$project/index'

const UsernameRouteRoute = UsernameRouteRouteImport.update({
  id: '/$username',
  path: '/$username',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const UsernameIndexRoute = UsernameIndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => UsernameRouteRoute,
} as any)
const UsernameProjectRouteRoute = UsernameProjectRouteRouteImport.update({
  id: '/$project',
  path: '/$project',
  getParentRoute: () => UsernameRouteRoute,
} as any)
const UsernameProjectIndexRoute = UsernameProjectIndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => UsernameProjectRouteRoute,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/$username': typeof UsernameRouteRouteWithChildren
  '/$username/$project': typeof UsernameProjectRouteRouteWithChildren
  '/$username/': typeof UsernameIndexRoute
  '/$username/$project/': typeof UsernameProjectIndexRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/$username': typeof UsernameIndexRoute
  '/$username/$project': typeof UsernameProjectIndexRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/$username': typeof UsernameRouteRouteWithChildren
  '/$username/$project': typeof UsernameProjectRouteRouteWithChildren
  '/$username/': typeof UsernameIndexRoute
  '/$username/$project/': typeof UsernameProjectIndexRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/$username'
    | '/$username/$project'
    | '/$username/'
    | '/$username/$project/'
  fileRoutesByTo: FileRoutesByTo
  to: '/' | '/$username' | '/$username/$project'
  id:
    | '__root__'
    | '/'
    | '/$username'
    | '/$username/$project'
    | '/$username/'
    | '/$username/$project/'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  UsernameRouteRoute: typeof UsernameRouteRouteWithChildren
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/$username': {
      id: '/$username'
      path: '/$username'
      fullPath: '/$username'
      preLoaderRoute: typeof UsernameRouteRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/$username/': {
      id: '/$username/'
      path: '/'
      fullPath: '/$username/'
      preLoaderRoute: typeof UsernameIndexRouteImport
      parentRoute: typeof UsernameRouteRoute
    }
    '/$username/$project': {
      id: '/$username/$project'
      path: '/$project'
      fullPath: '/$username/$project'
      preLoaderRoute: typeof UsernameProjectRouteRouteImport
      parentRoute: typeof UsernameRouteRoute
    }
    '/$username/$project/': {
      id: '/$username/$project/'
      path: '/'
      fullPath: '/$username/$project/'
      preLoaderRoute: typeof UsernameProjectIndexRouteImport
      parentRoute: typeof UsernameProjectRouteRoute
    }
  }
}

interface UsernameProjectRouteRouteChildren {
  UsernameProjectIndexRoute: typeof UsernameProjectIndexRoute
}

const UsernameProjectRouteRouteChildren: UsernameProjectRouteRouteChildren = {
  UsernameProjectIndexRoute: UsernameProjectIndexRoute,
}

const UsernameProjectRouteRouteWithChildren =
  UsernameProjectRouteRoute._addFileChildren(UsernameProjectRouteRouteChildren)

interface UsernameRouteRouteChildren {
  UsernameProjectRouteRoute: typeof UsernameProjectRouteRouteWithChildren
  UsernameIndexRoute: typeof UsernameIndexRoute
}

const UsernameRouteRouteChildren: UsernameRouteRouteChildren = {
  UsernameProjectRouteRoute: UsernameProjectRouteRouteWithChildren,
  UsernameIndexRoute: UsernameIndexRoute,
}

const UsernameRouteRouteWithChildren = UsernameRouteRoute._addFileChildren(
  UsernameRouteRouteChildren,
)

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  UsernameRouteRoute: UsernameRouteRouteWithChildren,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
